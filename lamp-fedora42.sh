#!/bin/bash

#=============================================================================
# Script: lamp-fedora42.sh
# Descri√ß√£o: Instala√ß√£o e configura√ß√£o autom√°tica de servidor LAMP no Fedora 42
#            (Linux + Apache + MariaDB + PHP + phpMyAdmin)
# Autor: Andre Berger
# Data: 04/10/2025
# Vers√£o: 1.0
# Licen√ßa: MIT
# Compatibilidade: Fedora 42+
#=============================================================================

# Configura√ß√µes do script
set -e  # Sair se qualquer comando falhar
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly LOG_FILE="/tmp/lamp-fedora42-$(date '+%Y%m%d_%H%M%S').log"

# Cores para output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly PURPLE='\033[0;35m'
readonly CYAN='\033[0;36m'
readonly WHITE='\033[1;37m'
readonly NC='\033[0m' # No Color

# Configura√ß√µes padr√£o (edit√°veis)
readonly SERVER_ADMIN="admin@localhost"
readonly SERVER_NAME="localhost"
readonly INTERNAL_NETWORK="127.0.0.1 10.0.0.0/24"
readonly CHARSET="utf8mb4"

#=============================================================================
# PASSO A PASSO DE EXECU√á√ÉO:
#=============================================================================
# 1. Executar como root:
#    sudo su -
#
# 2. Tornar execut√°vel:
#    chmod +x lamp-fedora42.sh
#
# 3. Executar o script:
#    ./lamp-fedora42.sh
#
# 4. Seguir as instru√ß√µes na tela
#
# 5. Testar a instala√ß√£o:
#    - Navegue para: http://localhost
#    - Teste PHP: http://localhost/info.php
#    - phpMyAdmin: http://localhost/phpMyAdmin
#
# 6. Verificar logs em caso de problemas:
#    tail -f /tmp/lamp-fedora42-*.log
#=============================================================================

#=============================================================================
# FUN√á√ïES AUXILIARES
#=============================================================================

# Fun√ß√£o para imprimir mensagens coloridas
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
    echo "$(date '+%Y-%m-%d %H:%M:%S') - ${message}" >> "$LOG_FILE"
}

# Fun√ß√£o para imprimir cabe√ßalho
print_header() {
    clear
    echo -e "${PURPLE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                       üöÄ INSTALADOR LAMP FEDORA 42                          ‚ïë"
    echo "‚ïë                    Linux + Apache + MariaDB + PHP                           ‚ïë"
    echo "‚ïë                              Vers√£o 1.0                                     ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    echo
}

# Fun√ß√£o para verificar se est√° executando como root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_message "$RED" "‚ùå Este script deve ser executado como root!"
        print_message "$CYAN" "üí° Execute: sudo ./lamp-fedora42.sh"
        exit 1
    fi
}

# Fun√ß√£o para verificar sistema operacional
check_fedora() {
    if ! grep -q "Fedora" /etc/os-release 2>/dev/null; then
        print_message "$RED" "‚ùå Este script √© espec√≠fico para Fedora 42+"
        print_message "$YELLOW" "‚ö†Ô∏è  Sistema atual: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
        exit 1
    fi
    
    local fedora_version
    fedora_version=$(grep VERSION_ID /etc/os-release | cut -d'=' -f2 | tr -d '"')
    
    if [[ $fedora_version -lt 42 ]]; then
        print_message "$YELLOW" "‚ö†Ô∏è  Este script foi testado no Fedora 42. Vers√£o atual: $fedora_version"
        print_message "$CYAN" "üí° Continuar mesmo assim? (s/N)"
        read -r continue_anyway
        if [[ "$continue_anyway" != "s" && "$continue_anyway" != "S" ]]; then
            exit 1
        fi
    fi
    
    print_message "$GREEN" "‚úÖ Sistema Fedora $fedora_version detectado"
}

# Fun√ß√£o para fazer backup de arquivo
backup_file() {
    local file="$1"
    if [[ -f "$file" ]]; then
        cp "$file" "${file}.backup-$(date '+%Y%m%d_%H%M%S')"
        print_message "$BLUE" "üìã Backup criado: ${file}.backup-$(date '+%Y%m%d_%H%M%S')"
    fi
}

# Fun√ß√£o para verificar se servi√ßo est√° rodando
check_service() {
    local service="$1"
    if systemctl is-active --quiet "$service"; then
        print_message "$GREEN" "‚úÖ Servi√ßo $service est√° ativo"
        return 0
    else
        print_message "$RED" "‚ùå Servi√ßo $service n√£o est√° ativo"
        return 1
    fi
}

# Fun√ß√£o para aguardar confirma√ß√£o do usu√°rio
wait_for_confirmation() {
    local message="$1"
    print_message "$CYAN" "$message"
    read -p "Pressione ENTER para continuar ou Ctrl+C para cancelar..."
}

#=============================================================================
# FUN√á√ïES DE INSTALA√á√ÉO
#=============================================================================

# Fun√ß√£o para atualizar sistema
update_system() {
    print_message "$BLUE" "üîÑ Atualizando sistema..."
    
    dnf update -y >> "$LOG_FILE" 2>&1
    
    print_message "$GREEN" "‚úÖ Sistema atualizado com sucesso"
}

# Fun√ß√£o para instalar e configurar Apache
install_apache() {
    print_message "$BLUE" "üåê Instalando Apache HTTP Server..."
    
    # Instalar Apache
    dnf install -y httpd >> "$LOG_FILE" 2>&1
    
    # Fazer backup e renomear welcome page
    if [[ -f /etc/httpd/conf.d/welcome.conf ]]; then
        mv /etc/httpd/conf.d/welcome.conf /etc/httpd/conf.d/welcome.conf.org
        print_message "$BLUE" "üìã Welcome page removida"
    fi
    
    # Fazer backup da configura√ß√£o original
    backup_file "/etc/httpd/conf/httpd.conf"
    
    # Configurar Apache
    print_message "$BLUE" "‚öôÔ∏è  Configurando Apache..."
    
    # Configurar ServerAdmin
    sed -i "s/#ServerAdmin you@example.com/ServerAdmin $SERVER_ADMIN/" /etc/httpd/conf/httpd.conf
    
    # Configurar ServerName
    sed -i "s/#ServerName www.example.com:80/ServerName $SERVER_NAME:80/" /etc/httpd/conf/httpd.conf
    
    # Remover Indexes das Options
    sed -i 's/Options Indexes FollowSymLinks/Options FollowSymLinks/' /etc/httpd/conf/httpd.conf
    
    # Configurar AllowOverride
    sed -i 's/AllowOverride None/AllowOverride All/' /etc/httpd/conf/httpd.conf
    
    # Adicionar DirectoryIndex
    sed -i '/DirectoryIndex index.html/c\    DirectoryIndex index.html index.php index.cgi' /etc/httpd/conf/httpd.conf
    
    # Adicionar ServerTokens
    echo -e "\n# Server response header\nServerTokens Prod" >> /etc/httpd/conf/httpd.conf
    
    # Habilitar e iniciar Apache
    systemctl enable httpd >> "$LOG_FILE" 2>&1
    systemctl start httpd >> "$LOG_FILE" 2>&1
    
    # Configurar firewall
    if systemctl is-active --quiet firewalld; then
        print_message "$BLUE" "üî• Configurando firewall para HTTP..."
        firewall-cmd --add-service=http >> "$LOG_FILE" 2>&1
        firewall-cmd --runtime-to-permanent >> "$LOG_FILE" 2>&1
    fi
    
    check_service "httpd"
    print_message "$GREEN" "‚úÖ Apache instalado e configurado com sucesso"
}

# Fun√ß√£o para instalar e configurar PHP
install_php() {
    print_message "$BLUE" "üêò Instalando PHP e extens√µes..."
    
    # Instalar PHP e extens√µes
    dnf install -y php php-mbstring php-pear php-mysqlnd php-mcrypt php-gettext >> "$LOG_FILE" 2>&1
    
    # Reiniciar Apache
    systemctl restart httpd >> "$LOG_FILE" 2>&1
    
    # Verificar se PHP-FPM est√° rodando
    check_service "php-fpm"
    
    # Criar p√°gina de teste PHP
    echo '<?php phpinfo(); ?>' > /var/www/html/info.php
    chmod 644 /var/www/html/info.php
    
    print_message "$GREEN" "‚úÖ PHP instalado e configurado com sucesso"
    print_message "$CYAN" "üìÑ P√°gina de teste PHP criada: http://$SERVER_NAME/info.php"
}

# Fun√ß√£o para instalar e configurar MariaDB
install_mariadb() {
    print_message "$BLUE" "üóÉÔ∏è  Instalando MariaDB..."
    
    # Instalar MariaDB
    dnf install -y mariadb-server >> "$LOG_FILE" 2>&1
    
    # Configurar charset
    print_message "$BLUE" "‚öôÔ∏è  Configurando charset para $CHARSET..."
    
    cat > /etc/my.cnf.d/charset.cnf << EOF
# Configura√ß√£o de charset para LAMP Fedora 42
# Charset padr√£o definido para suporte completo UTF-8
[mysqld]
character-set-server = $CHARSET

[client]
default-character-set = $CHARSET
EOF
    
    # Habilitar e iniciar MariaDB
    systemctl enable mariadb >> "$LOG_FILE" 2>&1
    systemctl start mariadb >> "$LOG_FILE" 2>&1
    
    # Configurar firewall para MariaDB
    if systemctl is-active --quiet firewalld; then
        print_message "$BLUE" "üî• Configurando firewall para MySQL..."
        firewall-cmd --add-service=mysql >> "$LOG_FILE" 2>&1
        firewall-cmd --runtime-to-permanent >> "$LOG_FILE" 2>&1
    fi
    
    check_service "mariadb"
    print_message "$GREEN" "‚úÖ MariaDB instalado e configurado com sucesso"
}

# Fun√ß√£o para configurar seguran√ßa do MariaDB
secure_mariadb() {
    print_message "$BLUE" "üîê Configurando seguran√ßa do MariaDB..."
    
    print_message "$YELLOW" "‚ö†Ô∏è  ATEN√á√ÉO: Configura√ß√£o de seguran√ßa do MariaDB"
    print_message "$CYAN" "Esta etapa ir√°:"
    print_message "$WHITE" "‚Ä¢ Remover usu√°rios an√¥nimos"
    print_message "$WHITE" "‚Ä¢ Desabilitar login root remoto"
    print_message "$WHITE" "‚Ä¢ Remover banco de teste"
    print_message "$WHITE" "‚Ä¢ Recarregar tabelas de privil√©gios"
    echo
    
    wait_for_confirmation "Deseja executar a configura√ß√£o autom√°tica de seguran√ßa?"
    
    # Executar mysql_secure_installation automaticamente
    mysql -e "DELETE FROM mysql.user WHERE User='';" 2>/dev/null || true
    mysql -e "DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');" 2>/dev/null || true
    mysql -e "DROP DATABASE IF EXISTS test;" 2>/dev/null || true
    mysql -e "DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';" 2>/dev/null || true
    mysql -e "FLUSH PRIVILEGES;" 2>/dev/null || true
    
    print_message "$GREEN" "‚úÖ Seguran√ßa do MariaDB configurada"
    
    # Criar banco de teste
    print_message "$BLUE" "üß™ Criando banco de teste..."
    
    mysql -e "CREATE DATABASE IF NOT EXISTS lamp_test;" 2>/dev/null || true
    mysql -e "CREATE TABLE IF NOT EXISTS lamp_test.test_table (id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(50), description TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP);" 2>/dev/null || true
    mysql -e "INSERT INTO lamp_test.test_table (name, description) VALUES ('LAMP Fedora 42', 'Instala√ß√£o autom√°tica realizada com sucesso!');" 2>/dev/null || true
    
    print_message "$GREEN" "‚úÖ Banco de teste criado: lamp_test"
}

# Fun√ß√£o para instalar phpMyAdmin
install_phpmyadmin() {
    print_message "$BLUE" "üìä Instalando phpMyAdmin..."
    
    # Instalar phpMyAdmin
    dnf install -y phpMyAdmin >> "$LOG_FILE" 2>&1
    
    # Fazer backup da configura√ß√£o
    backup_file "/etc/httpd/conf.d/phpMyAdmin.conf"
    
    # Configurar acesso ao phpMyAdmin
    print_message "$BLUE" "‚öôÔ∏è  Configurando acesso ao phpMyAdmin..."
    
    # Permitir acesso da rede interna
    sed -i "s|Require ip 127.0.0.1|Require ip $INTERNAL_NETWORK|g" /etc/httpd/conf.d/phpMyAdmin.conf
    
    # Recarregar Apache
    systemctl reload httpd >> "$LOG_FILE" 2>&1
    
    # Configurar SELinux se estiver ativo
    if getenforce 2>/dev/null | grep -q "Enforcing"; then
        print_message "$BLUE" "üîí Configurando SELinux para phpMyAdmin..."
        setsebool -P httpd_can_network_connect on >> "$LOG_FILE" 2>&1
        setsebool -P httpd_execmem on >> "$LOG_FILE" 2>&1
        print_message "$GREEN" "‚úÖ SELinux configurado"
    fi
    
    print_message "$GREEN" "‚úÖ phpMyAdmin instalado e configurado"
    print_message "$CYAN" "üìä Acesso ao phpMyAdmin: http://$SERVER_NAME/phpMyAdmin"
}

# Fun√ß√£o para criar p√°gina de boas-vindas
create_welcome_page() {
    print_message "$BLUE" "üìù Criando p√°gina de boas-vindas..."
    
    cat > /var/www/html/index.html << 'EOF'
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LAMP Fedora 42 - Servidor Configurado</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .container {
            text-align: center;
            padding: 2rem;
            background: rgba(255,255,255,0.1);
            border-radius: 15px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            max-width: 800px;
        }
        h1 {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        .services {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin: 2rem 0;
        }
        .service {
            background: rgba(255,255,255,0.15);
            padding: 1rem;
            border-radius: 10px;
            transition: transform 0.3s ease;
        }
        .service:hover {
            transform: translateY(-5px);
        }
        .service h3 {
            margin: 0 0 0.5rem 0;
            font-size: 1.2rem;
        }
        .service a {
            color: #fff;
            text-decoration: none;
            font-weight: bold;
        }
        .service a:hover {
            text-decoration: underline;
        }
        .footer {
            margin-top: 2rem;
            font-size: 0.9rem;
            opacity: 0.8;
        }
        .status {
            background: rgba(76, 175, 80, 0.2);
            border: 1px solid rgba(76, 175, 80, 0.5);
            border-radius: 5px;
            padding: 0.5rem;
            margin: 1rem 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöÄ LAMP Fedora 42</h1>
        <div class="status">
            <strong>‚úÖ Servidor configurado com sucesso!</strong>
        </div>
        
        <p>Seu servidor LAMP (Linux + Apache + MariaDB + PHP) est√° funcionando perfeitamente!</p>
        
        <div class="services">
            <div class="service">
                <h3>üåê Apache HTTP</h3>
                <p>Servidor web ativo</p>
                <p>Vers√£o: HTTP/2.4</p>
            </div>
            
            <div class="service">
                <h3>üêò PHP</h3>
                <p><a href="info.php">Ver informa√ß√µes do PHP</a></p>
                <p>Extens√µes carregadas</p>
            </div>
            
            <div class="service">
                <h3>üóÉÔ∏è MariaDB</h3>
                <p>Banco de dados ativo</p>
                <p>Charset: UTF-8</p>
            </div>
            
            <div class="service">
                <h3>üìä phpMyAdmin</h3>
                <p><a href="phpMyAdmin">Acessar phpMyAdmin</a></p>
                <p>Gerenciamento de BD</p>
            </div>
        </div>
        
        <div class="footer">
            <p>Instala√ß√£o autom√°tica realizada em: <strong><?php echo date('d/m/Y H:i:s'); ?></strong></p>
            <p>Script: lamp-fedora42.sh v1.0 | Autor: Andre Berger</p>
        </div>
    </div>
</body>
</html>
EOF
    
    # Converter para PHP para mostrar data din√¢mica
    mv /var/www/html/index.html /var/www/html/index.php
    chmod 644 /var/www/html/index.php
    
    print_message "$GREEN" "‚úÖ P√°gina de boas-vindas criada"
}

# Fun√ß√£o para executar testes de funcionamento
run_tests() {
    print_message "$BLUE" "üß™ Executando testes de funcionamento..."
    
    # Teste 1: Apache
    if curl -s http://localhost > /dev/null; then
        print_message "$GREEN" "‚úÖ Teste Apache: OK"
    else
        print_message "$RED" "‚ùå Teste Apache: FALHOU"
    fi
    
    # Teste 2: PHP
    if curl -s http://localhost/info.php | grep -q "PHP Version"; then
        print_message "$GREEN" "‚úÖ Teste PHP: OK"
    else
        print_message "$RED" "‚ùå Teste PHP: FALHOU"
    fi
    
    # Teste 3: MariaDB
    if mysql -e "SELECT 1;" > /dev/null 2>&1; then
        print_message "$GREEN" "‚úÖ Teste MariaDB: OK"
    else
        print_message "$RED" "‚ùå Teste MariaDB: FALHOU"
    fi
    
    # Teste 4: Banco de teste
    if mysql -e "SELECT * FROM lamp_test.test_table;" > /dev/null 2>&1; then
        print_message "$GREEN" "‚úÖ Teste Banco de Dados: OK"
    else
        print_message "$YELLOW" "‚ö†Ô∏è  Teste Banco de Dados: Aviso"
    fi
    
    # Teste 5: phpMyAdmin
    if [[ -f /usr/share/phpMyAdmin/index.php ]]; then
        print_message "$GREEN" "‚úÖ Teste phpMyAdmin: OK"
    else
        print_message "$RED" "‚ùå Teste phpMyAdmin: FALHOU"
    fi
}

# Fun√ß√£o para mostrar informa√ß√µes finais
show_final_info() {
    echo
    print_message "$GREEN" "üéâ INSTALA√á√ÉO LAMP CONCLU√çDA COM SUCESSO!"
    echo
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë                              INFORMA√á√ïES DO SERVIDOR                         ‚ïë${NC}"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo
    echo -e "${WHITE}üåê Servidor Web:${NC} http://$SERVER_NAME"
    echo -e "${WHITE}üêò Informa√ß√µes PHP:${NC} http://$SERVER_NAME/info.php"
    echo -e "${WHITE}üìä phpMyAdmin:${NC} http://$SERVER_NAME/phpMyAdmin"
    echo -e "${WHITE}üóÉÔ∏è  MariaDB:${NC} mysql -u root -p (autentica√ß√£o unix_socket)"
    echo
    echo -e "${YELLOW}üìã SERVI√áOS ATIVOS:${NC}"
    echo -e "${WHITE}‚Ä¢ Apache HTTP Server (httpd)${NC}"
    echo -e "${WHITE}‚Ä¢ PHP-FPM (php-fpm)${NC}"
    echo -e "${WHITE}‚Ä¢ MariaDB (mariadb)${NC}"
    echo
    echo -e "${YELLOW}üìÅ DIRET√ìRIOS IMPORTANTES:${NC}"
    echo -e "${WHITE}‚Ä¢ Web Root: /var/www/html${NC}"
    echo -e "${WHITE}‚Ä¢ Apache Config: /etc/httpd/conf/httpd.conf${NC}"
    echo -e "${WHITE}‚Ä¢ PHP Config: /etc/php.ini${NC}"
    echo -e "${WHITE}‚Ä¢ MariaDB Config: /etc/my.cnf.d/charset.cnf${NC}"
    echo
    echo -e "${YELLOW}üîß COMANDOS √öTEIS:${NC}"
    echo -e "${WHITE}‚Ä¢ Reiniciar Apache: systemctl restart httpd${NC}"
    echo -e "${WHITE}‚Ä¢ Reiniciar MariaDB: systemctl restart mariadb${NC}"
    echo -e "${WHITE}‚Ä¢ Ver logs Apache: tail -f /var/log/httpd/error_log${NC}"
    echo -e "${WHITE}‚Ä¢ Ver logs MariaDB: tail -f /var/log/mariadb/mariadb.log${NC}"
    echo
    echo -e "${YELLOW}üìã Log da instala√ß√£o:${NC} $LOG_FILE"
    echo
    echo -e "${GREEN}‚ú® Seu servidor LAMP est√° pronto para uso!${NC}"
}

#=============================================================================
# FUN√á√ÉO PRINCIPAL
#=============================================================================

main() {
    print_header
    
    # Verifica√ß√µes iniciais
    check_root
    check_fedora
    
    print_message "$BLUE" "üöÄ Iniciando instala√ß√£o do servidor LAMP..."
    print_message "$CYAN" "üìã Log ser√° salvo em: $LOG_FILE"
    echo
    
    wait_for_confirmation "Deseja continuar com a instala√ß√£o?"
    
    # Executar instala√ß√£o
    update_system
    echo
    
    install_apache
    echo
    
    install_php
    echo
    
    install_mariadb
    echo
    
    secure_mariadb
    echo
    
    install_phpmyadmin
    echo
    
    create_welcome_page
    echo
    
    run_tests
    echo
    
    show_final_info
}

#=============================================================================
# TRATAMENTO DE SINAIS
#=============================================================================

# Fun√ß√£o para cleanup em caso de interrup√ß√£o
cleanup_on_exit() {
    print_message "$YELLOW" "‚ö†Ô∏è  Instala√ß√£o interrompida pelo usu√°rio"
    print_message "$CYAN" "üìã Log parcial dispon√≠vel em: $LOG_FILE"
    exit 1
}

# Registrar handlers para sinais
trap cleanup_on_exit SIGINT SIGTERM

#=============================================================================
# EXECU√á√ÉO
#=============================================================================

# Executar fun√ß√£o principal
main "$@"

# C√≥digo de sa√≠da
print_message "$GREEN" "‚úÖ Script finalizado com sucesso!"
exit 0