#!/bin/bash

#=============================================================================
# Script de Gerenciamento de Usu√°rios
#=============================================================================
# Descri√ß√£o: Script interativo para gerenciamento completo de usu√°rios do
#            sistema atrav√©s de menus organizados. Permite adicionar, listar,
#            remover usu√°rios e gerenciar grupos com valida√ß√µes de seguran√ßa.
#
# Autor: Andre Berger
# Data: $(date +%d/%m/%Y)
# Vers√£o: 2.0
# Compatibilidade: Linux/Unix (requer privil√©gios sudo)
#
# ATEN√á√ÉO: Este script requer privil√©gios de administrador (sudo)
#          para realizar opera√ß√µes de gerenciamento de usu√°rios
#
#=============================================================================
# PASSO A PASSO PARA EXECU√á√ÉO:
#=============================================================================
# 1. Torne o script execut√°vel: chmod +x gerenciar-usuarios.sh
# 2. Execute o script: ./gerenciar-usuarios.sh
# 3. Escolha as op√ß√µes do menu interativo
# 4. Digite sua senha sudo quando solicitado
#
# FUNCIONALIDADES:
#   ‚Ä¢ Adicionar usu√°rios com valida√ß√µes
#   ‚Ä¢ Listar usu√°rios do sistema
#   ‚Ä¢ Remover usu√°rios com seguran√ßa
#   ‚Ä¢ Gerenciar grupos de usu√°rios
#   ‚Ä¢ Visualizar informa√ß√µes detalhadas
#   ‚Ä¢ Logs de opera√ß√µes
#=============================================================================

# Configura√ß√µes globais
set -e  # Sair em caso de erro
LOG_FILE="/tmp/user-management-$(date +%Y%m%d_%H%M%S).log"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

#=============================================================================
# FUN√á√ïES AUXILIARES
#=============================================================================

# Fun√ß√£o para imprimir mensagens coloridas
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}" | tee -a "$LOG_FILE"
}

# Fun√ß√£o para imprimir cabe√ßalho
print_header() {
    clear
    echo -e "${BLUE}============================================${NC}"
    echo -e "${BLUE}    GERENCIAMENTO DE USU√ÅRIOS DO SISTEMA${NC}"
    echo -e "${BLUE}============================================${NC}"
    echo -e "${CYAN}Data/Hora: $(date '+%d/%m/%Y √†s %H:%M:%S')${NC}"
    echo -e "${CYAN}Log: $LOG_FILE${NC}"
    echo -e "${BLUE}============================================${NC}\n"
}

# Fun√ß√£o para verificar se usu√°rio existe
user_exists() {
    local username=$1
    if id "$username" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

# Fun√ß√£o para validar nome de usu√°rio
validate_username() {
    local username=$1
    
    # Verificar se n√£o est√° vazio
    if [ -z "$username" ]; then
        print_message "$RED" "‚úó Nome de usu√°rio n√£o pode estar vazio"
        return 1
    fi
    
    # Verificar caracteres v√°lidos (apenas letras, n√∫meros, h√≠fen e underscore)
    if ! [[ "$username" =~ ^[a-zA-Z][a-zA-Z0-9_-]*$ ]]; then
        print_message "$RED" "‚úó Nome de usu√°rio inv√°lido. Use apenas letras, n√∫meros, h√≠fen e underscore"
        print_message "$YELLOW" "  Deve come√ßar com uma letra"
        return 1
    fi
    
    # Verificar comprimento
    if [ ${#username} -gt 32 ]; then
        print_message "$RED" "‚úó Nome de usu√°rio muito longo (m√°ximo 32 caracteres)"
        return 1
    fi
    
    return 0
}

# Fun√ß√£o para adicionar usu√°rio
add_user() {
    print_header
    echo -e "${YELLOW}=== ADICIONAR USU√ÅRIO ===${NC}\n"
    
    while true; do
        read -p "Digite o nome do usu√°rio a ser adicionado: " NOVO_USUARIO
        
        if validate_username "$NOVO_USUARIO"; then
            if user_exists "$NOVO_USUARIO"; then
                print_message "$RED" "‚úó Usu√°rio '$NOVO_USUARIO' j√° existe!"
                read -p "Pressione Enter para tentar outro nome..."
                continue
            else
                break
            fi
        else
            read -p "Pressione Enter para tentar novamente..."
        fi
    done
    
    # Op√ß√µes adicionais
    echo -e "\n${CYAN}Op√ß√µes adicionais:${NC}"
    read -p "Criar diret√≥rio home? (S/n): " CREATE_HOME
    read -p "Definir shell espec√≠fico? (bash/sh/zsh ou Enter para padr√£o): " USER_SHELL
    read -p "Adicionar a grupos espec√≠ficos? (ex: sudo,docker): " USER_GROUPS
    
    # Construir comando useradd
    CMD="sudo useradd"
    
    case $CREATE_HOME in
        [nN]|[nN][aA][oO])
            CMD="$CMD --no-create-home"
            ;;
        *)
            CMD="$CMD --create-home"
            ;;
    esac
    
    if [ -n "$USER_SHELL" ]; then
        case $USER_SHELL in
            bash)
                CMD="$CMD --shell /bin/bash"
                ;;
            sh)
                CMD="$CMD --shell /bin/sh"
                ;;
            zsh)
                CMD="$CMD --shell /bin/zsh"
                ;;
            *)
                print_message "$YELLOW" "‚ö† Shell '$USER_SHELL' pode n√£o existir"
                CMD="$CMD --shell $USER_SHELL"
                ;;
        esac
    fi
    
    if [ -n "$USER_GROUPS" ]; then
        CMD="$CMD --groups $USER_GROUPS"
    fi
    
    CMD="$CMD $NOVO_USUARIO"
    
    # Executar comando
    print_message "$YELLOW" "üîÑ Executando: $CMD"
    if eval "$CMD" 2>>"$LOG_FILE"; then
        print_message "$GREEN" "‚úì Usu√°rio '$NOVO_USUARIO' adicionado com sucesso!"
        
        # Definir senha
        if read -s -p "Definir senha para o usu√°rio? (s/N): " SET_PASSWORD && echo; then
            case $SET_PASSWORD in
                [sS]|[sS][iI][mM])
                    sudo passwd "$NOVO_USUARIO"
                    ;;
            esac
        fi
        
        # Exibir informa√ß√µes do usu√°rio
        echo -e "\n${CYAN}Informa√ß√µes do usu√°rio criado:${NC}"
        id "$NOVO_USUARIO"
        
    else
        print_message "$RED" "‚úó Erro ao adicionar usu√°rio '$NOVO_USUARIO'"
    fi
    
    read -p "Pressione Enter para continuar..."
}

# Fun√ß√£o para listar usu√°rios
list_users() {
    print_header
    echo -e "${YELLOW}=== LISTA DE USU√ÅRIOS ===${NC}\n"
    
    echo -e "${CYAN}Escolha o tipo de listagem:${NC}"
    echo "1. Todos os usu√°rios"
    echo "2. Apenas usu√°rios do sistema (UID < 1000)"
    echo "3. Apenas usu√°rios normais (UID >= 1000)"
    echo "4. Usu√°rios logados atualmente"
    read -p "Op√ß√£o: " LIST_OPTION
    
    case $LIST_OPTION in
        1)
            echo -e "\n${CYAN}Todos os usu√°rios do sistema:${NC}"
            cut -d: -f1,3,5 /etc/passwd | column -t -s':'
            ;;
        2)
            echo -e "\n${CYAN}Usu√°rios do sistema (UID < 1000):${NC}"
            awk -F: '$3 < 1000 {print $1, $3, $5}' /etc/passwd | column -t
            ;;
        3)
            echo -e "\n${CYAN}Usu√°rios normais (UID >= 1000):${NC}"
            awk -F: '$3 >= 1000 {print $1, $3, $5}' /etc/passwd | column -t
            ;;
        4)
            echo -e "\n${CYAN}Usu√°rios logados atualmente:${NC}"
            who | awk '{print $1}' | sort | uniq
            ;;
        *)
            print_message "$RED" "‚úó Op√ß√£o inv√°lida"
            ;;
    esac
    
    echo -e "\n${CYAN}Total de usu√°rios no sistema: $(wc -l < /etc/passwd)${NC}"
    read -p "Pressione Enter para continuar..."
}

# Fun√ß√£o para remover usu√°rio
remove_user() {
    print_header
    echo -e "${YELLOW}=== REMOVER USU√ÅRIO ===${NC}\n"
    
    # Listar usu√°rios normais primeiro
    echo -e "${CYAN}Usu√°rios dispon√≠veis para remo√ß√£o (UID >= 1000):${NC}"
    awk -F: '$3 >= 1000 {print $1}' /etc/passwd | column
    
    echo
    read -p "Digite o nome do usu√°rio a ser removido: " USUARIO_REMOVER
    
    if [ -z "$USUARIO_REMOVER" ]; then
        print_message "$RED" "‚úó Nome de usu√°rio n√£o pode estar vazio"
        read -p "Pressione Enter para continuar..."
        return
    fi
    
    if ! user_exists "$USUARIO_REMOVER"; then
        print_message "$RED" "‚úó Usu√°rio '$USUARIO_REMOVER' n√£o existe!"
        read -p "Pressione Enter para continuar..."
        return
    fi
    
    # Verificar se √© usu√°rio do sistema
    USER_UID=$(id -u "$USUARIO_REMOVER")
    if [ "$USER_UID" -lt 1000 ] && [ "$USER_UID" -ne 0 ]; then
        print_message "$RED" "‚ö† ATEN√á√ÉO: '$USUARIO_REMOVER' √© um usu√°rio do sistema!"
        read -p "Tem certeza que deseja continuar? (digite 'CONFIRMAR'): " CONFIRM_SYSTEM
        if [ "$CONFIRM_SYSTEM" != "CONFIRMAR" ]; then
            print_message "$YELLOW" "Opera√ß√£o cancelada"
            read -p "Pressione Enter para continuar..."
            return
        fi
    fi
    
    # Verificar se usu√°rio est√° logado
    if who | grep -q "^$USUARIO_REMOVER "; then
        print_message "$YELLOW" "‚ö† Usu√°rio '$USUARIO_REMOVER' est√° logado atualmente!"
        read -p "Deseja for√ßar logout? (s/N): " FORCE_LOGOUT
        case $FORCE_LOGOUT in
            [sS]|[sS][iI][mM])
                sudo pkill -u "$USUARIO_REMOVER" 2>/dev/null || true
                ;;
        esac
    fi
    
    # Op√ß√µes de remo√ß√£o
    echo -e "\n${CYAN}Op√ß√µes de remo√ß√£o:${NC}"
    read -p "Remover diret√≥rio home? (S/n): " REMOVE_HOME
    read -p "Remover emails do usu√°rio? (S/n): " REMOVE_MAIL
    
    # Confirma√ß√£o final
    echo -e "\n${RED}ATEN√á√ÉO: Esta opera√ß√£o √© irrevers√≠vel!${NC}"
    read -p "Confirma a remo√ß√£o do usu√°rio '$USUARIO_REMOVER'? (digite 'SIM'): " CONFIRMACAO
    
    if [ "$CONFIRMACAO" = "SIM" ]; then
        CMD="sudo userdel"
        
        case $REMOVE_HOME in
            [nN]|[nN][aA][oO])
                ;;
            *)
                CMD="$CMD --remove"
                ;;
        esac
        
        case $REMOVE_MAIL in
            [nN]|[nN][aA][oO])
                ;;
            *)
                CMD="$CMD --remove-all-files"
                ;;
        esac
        
        CMD="$CMD $USUARIO_REMOVER"
        
        print_message "$YELLOW" "üîÑ Executando: $CMD"
        if eval "$CMD" 2>>"$LOG_FILE"; then
            print_message "$GREEN" "‚úì Usu√°rio '$USUARIO_REMOVER' removido com sucesso!"
        else
            print_message "$RED" "‚úó Erro ao remover usu√°rio '$USUARIO_REMOVER'"
        fi
    else
        print_message "$YELLOW" "Opera√ß√£o cancelada"
    fi
    
    read -p "Pressione Enter para continuar..."
}

# Fun√ß√£o para gerenciar grupos
manage_groups() {
    print_header
    echo -e "${YELLOW}=== GERENCIAR GRUPOS ===${NC}\n"
    
    echo "1. Listar grupos"
    echo "2. Adicionar usu√°rio a grupo"
    echo "3. Remover usu√°rio de grupo"
    echo "4. Criar novo grupo"
    echo "5. Voltar ao menu principal"
    read -p "Escolha uma op√ß√£o: " GROUP_OPTION
    
    case $GROUP_OPTION in
        1)
            echo -e "\n${CYAN}Grupos do sistema:${NC}"
            cut -d: -f1 /etc/group | column
            ;;
        2)
            read -p "Nome do usu√°rio: " USERNAME
            read -p "Nome do grupo: " GROUPNAME
            if user_exists "$USERNAME" && getent group "$GROUPNAME" >/dev/null; then
                sudo usermod -a -G "$GROUPNAME" "$USERNAME"
                print_message "$GREEN" "‚úì Usu√°rio '$USERNAME' adicionado ao grupo '$GROUPNAME'"
            else
                print_message "$RED" "‚úó Usu√°rio ou grupo n√£o existe"
            fi
            ;;
        3)
            read -p "Nome do usu√°rio: " USERNAME
            read -p "Nome do grupo: " GROUPNAME
            if user_exists "$USERNAME"; then
                sudo gpasswd -d "$USERNAME" "$GROUPNAME" 2>/dev/null
                print_message "$GREEN" "‚úì Usu√°rio '$USERNAME' removido do grupo '$GROUPNAME'"
            else
                print_message "$RED" "‚úó Usu√°rio n√£o existe"
            fi
            ;;
        4)
            read -p "Nome do novo grupo: " NEWGROUP
            sudo groupadd "$NEWGROUP"
            print_message "$GREEN" "‚úì Grupo '$NEWGROUP' criado com sucesso"
            ;;
        5)
            return
            ;;
        *)
            print_message "$RED" "‚úó Op√ß√£o inv√°lida"
            ;;
    esac
    
    read -p "Pressione Enter para continuar..."
}

#=============================================================================
# MENU PRINCIPAL
#=============================================================================

main_menu() {
    while true; do
        print_header
        echo -e "${CYAN}MENU PRINCIPAL${NC}"
        echo -e "${BLUE}============================================${NC}"
        echo "1. üë§ Adicionar Usu√°rio"
        echo "2. üìã Listar Usu√°rios"
        echo "3. üóëÔ∏è  Remover Usu√°rio"
        echo "4. üë• Gerenciar Grupos"
        echo "5. üìä Estat√≠sticas do Sistema"
        echo "6. üö™ Sair"
        echo -e "${BLUE}============================================${NC}"
        read -p "Escolha uma op√ß√£o (1-6): " OPCAO

        case $OPCAO in
            1)
                add_user
                ;;
            2)
                list_users
                ;;
            3)
                remove_user
                ;;
            4)
                manage_groups
                ;;
            5)
                print_header
                echo -e "${YELLOW}=== ESTAT√çSTICAS DO SISTEMA ===${NC}\n"
                echo -e "${CYAN}Total de usu√°rios:${NC} $(wc -l < /etc/passwd)"
                echo -e "${CYAN}Total de grupos:${NC} $(wc -l < /etc/group)"
                echo -e "${CYAN}Usu√°rios logados:${NC} $(who | wc -l)"
                echo -e "${CYAN}√öltimo login:${NC} $(last -1 | head -1)"
                read -p "Pressione Enter para continuar..."
                ;;
            6)
                print_message "$GREEN" "üëã Saindo do sistema de gerenciamento..."
                echo "Script finalizado em: $(date)" >> "$LOG_FILE"
                exit 0
                ;;
            *)
                print_message "$RED" "‚úó Op√ß√£o inv√°lida. Escolha entre 1-6."
                read -p "Pressione Enter para tentar novamente..."
                ;;
        esac
    done
}

#=============================================================================
# IN√çCIO DO SCRIPT
#=============================================================================

# Verificar se tem privil√©gios sudo
if ! sudo -n true 2>/dev/null; then
    print_message "$YELLOW" "Este script requer privil√©gios sudo. Voc√™ ser√° solicitado a inserir sua senha."
    sudo -v
fi

echo "Script iniciado em: $(date)" >> "$LOG_FILE"
main_menu